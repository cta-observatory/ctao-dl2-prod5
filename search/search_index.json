{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CTAO Monte Carlo Simulations - DL2 prod5","text":"<p>This site provides a simple overview of the dataset CTAO Monte Carlo Simulations at DL2 level: https://zenodo.org/records/7298569</p> <p>To get more information about the dataset, please visit the Zenodo page.</p> <p>For up-to-date code examples, please visit the ctapipe documentation: https://cta-observatory.github.io/ctapipe/.</p>"},{"location":"#installation","title":"Installation","text":"<p>To run the notebooks on your computer, create a new conda environment and install the required packages:</p> <pre><code>conda env create -f environment.yml\nconda activate ctaodl2\n</code></pre> <p>Then start Jupyter:</p> <pre><code>jupyter-lab\n</code></pre>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Simulation info</li> <li>DL2 Parameters</li> <li>Events Images</li> <li>Reconstruction performances</li> </ul>"},{"location":"display_images/","title":"Display images from telescopes","text":"In\u00a0[1]: Copied! <pre>import ctapipe\nprint(ctapipe.__version__)\n</pre> import ctapipe print(ctapipe.__version__) <pre>0.17.0\n</pre> In\u00a0[2]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom ctapipe.instrument import SubarrayDescription\nfrom ctapipe.visualization import CameraDisplay\nfrom ctapipe.io import TableLoader\nfrom pathlib import Path\n</pre> import numpy as np import matplotlib.pyplot as plt from ctapipe.instrument import SubarrayDescription from ctapipe.visualization import CameraDisplay from ctapipe.io import TableLoader from pathlib import Path <pre>/home/runner/micromamba/envs/ctaodl2/lib/python3.9/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n</pre> In\u00a0[3]: Copied! <pre>dl2_proton_filename = \"../data/proton_with_images_00.dl2.h5\"\ndl2_gamma_filename = \"../data/gamma-diffuse_with_images_00.dl2.h5\"\n</pre> dl2_proton_filename = \"../data/proton_with_images_00.dl2.h5\" dl2_gamma_filename = \"../data/gamma-diffuse_with_images_00.dl2.h5\" In\u00a0[4]: Copied! <pre>subarray = SubarrayDescription.from_hdf(dl2_proton_filename)\n</pre> subarray = SubarrayDescription.from_hdf(dl2_proton_filename) In\u00a0[5]: Copied! <pre>def read_table(filename, tel_ids=None, stop=None):\n    \"\"\"\n    Read data from a file and return it as a pandas DataFrame.\n\n    Parameters\n    ----------\n    filename : str\n        The path to the input file.\n    tel_ids : list or None, optional\n        A list of telescope IDs to include in the data. If None, all telescopes are included. Default is None.\n    stop : int or None, optional\n        The number of events to read from the file. If None, all events are read. Default is None.\n    Returns\n    -------\n    pandas.DataFrame\n        The data read from the file as a pandas DataFrame.\n    \"\"\"\n    loader = TableLoader(\n        input_url=filename,\n        load_dl1_parameters=True,\n        load_dl2=False,\n        load_instrument=False,\n        load_simulated=False,\n        load_true_parameters=False,\n        load_dl1_images=True,\n    )\n\n    data = loader.read_telescope_events(telescopes=tel_ids, stop=stop)\n    return data\n    \n</pre> def read_table(filename, tel_ids=None, stop=None):     \"\"\"     Read data from a file and return it as a pandas DataFrame.      Parameters     ----------     filename : str         The path to the input file.     tel_ids : list or None, optional         A list of telescope IDs to include in the data. If None, all telescopes are included. Default is None.     stop : int or None, optional         The number of events to read from the file. If None, all events are read. Default is None.     Returns     -------     pandas.DataFrame         The data read from the file as a pandas DataFrame.     \"\"\"     loader = TableLoader(         input_url=filename,         load_dl1_parameters=True,         load_dl2=False,         load_instrument=False,         load_simulated=False,         load_true_parameters=False,         load_dl1_images=True,     )      data = loader.read_telescope_events(telescopes=tel_ids, stop=stop)     return data      In\u00a0[6]: Copied! <pre>def frame_strip(display):\n    \"\"\"\n    Remove all frame elements from a CameraDisplay object.\n\n    Parameters\n    ----------\n    display : ctapipe.visualization.CameraDisplay\n        The CameraDisplay object to modify.\n    \"\"\"\n    display.axes.set_frame_on(False)  # Remove the frame\n    display.axes.set_title('')  # Remove the title\n    display.axes.set_xticks([])  # Remove x-axis ticks\n    display.axes.set_yticks([])  # Remove y-axis ticks\n    display.axes.set_xlabel('')  # Remove x-axis label\n    display.axes.set_ylabel('')  # Remove y-axis label\n    display.add_frame_name((1, 1, 1, 0))  # Remove \"CameraFrame\" by setting alpha to 0\n    display.cmap.set_bad(alpha=0)  # Make the background transparent\n    for text in display.axes.texts:\n        if \"Frame\" in text.get_text():  # Match the label text\n            text.set_visible(False)  # Hide it\n</pre> def frame_strip(display):     \"\"\"     Remove all frame elements from a CameraDisplay object.      Parameters     ----------     display : ctapipe.visualization.CameraDisplay         The CameraDisplay object to modify.     \"\"\"     display.axes.set_frame_on(False)  # Remove the frame     display.axes.set_title('')  # Remove the title     display.axes.set_xticks([])  # Remove x-axis ticks     display.axes.set_yticks([])  # Remove y-axis ticks     display.axes.set_xlabel('')  # Remove x-axis label     display.axes.set_ylabel('')  # Remove y-axis label     display.add_frame_name((1, 1, 1, 0))  # Remove \"CameraFrame\" by setting alpha to 0     display.cmap.set_bad(alpha=0)  # Make the background transparent     for text in display.axes.texts:         if \"Frame\" in text.get_text():  # Match the label text             text.set_visible(False)  # Hide it In\u00a0[7]: Copied! <pre>protons = read_table(dl2_proton_filename, stop=1000)\ngammas = read_table(dl2_gamma_filename, stop=1000)\n</pre> protons = read_table(dl2_proton_filename, stop=1000) gammas = read_table(dl2_gamma_filename, stop=1000)  In\u00a0[8]: Copied! <pre># select events above a certain intensity threshold\nmin_intensity = 100\nprotons = protons[protons['hillas_intensity'] &gt; min_intensity]\ngammas = gammas[gammas['hillas_intensity'] &gt; min_intensity]\n\nprint(f\"Number of protons: {len(protons)}\")\nprint(f\"Number of gammas: {len(gammas)}\")\n</pre> # select events above a certain intensity threshold min_intensity = 100 protons = protons[protons['hillas_intensity'] &gt; min_intensity] gammas = gammas[gammas['hillas_intensity'] &gt; min_intensity]  print(f\"Number of protons: {len(protons)}\") print(f\"Number of gammas: {len(gammas)}\") <pre>Number of protons: 1425\nNumber of gammas: 1674\n</pre> In\u00a0[9]: Copied! <pre>def plot_images_board(events):\n    fig, axes = plt.subplots(6, 10, figsize=(16, 9))\n\n    for i in range(60):\n        ax = axes.flatten()[i]\n        image = events[i]['image']\n        tel_id = events[i]['tel_id']\n        camera = subarray.tel[tel_id].camera\n        geometry = camera.geometry\n        display = CameraDisplay(geometry, ax=ax)\n        display.image = image\n        frame_strip(display)\n\n    plt.subplots_adjust(wspace=0, hspace=0)  # Remove space between subplots\n    plt.tight_layout()\n</pre> def plot_images_board(events):     fig, axes = plt.subplots(6, 10, figsize=(16, 9))      for i in range(60):         ax = axes.flatten()[i]         image = events[i]['image']         tel_id = events[i]['tel_id']         camera = subarray.tel[tel_id].camera         geometry = camera.geometry         display = CameraDisplay(geometry, ax=ax)         display.image = image         frame_strip(display)      plt.subplots_adjust(wspace=0, hspace=0)  # Remove space between subplots     plt.tight_layout() In\u00a0[10]: Copied! <pre>plot_images_board(gammas)\nplt.title('Gamma events')\nplt.show()\n</pre> plot_images_board(gammas) plt.title('Gamma events') plt.show() In\u00a0[11]: Copied! <pre>plot_images_board(protons)\nplt.title('Proton events')\nplt.show()\n</pre> plot_images_board(protons) plt.title('Proton events') plt.show()  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"display_images/#display-images-from-telescopes","title":"Display images from telescopes\u00b6","text":""},{"location":"display_images/#random-events","title":"Random Events\u00b6","text":""},{"location":"dl2_params/","title":"Explore ctapipe DL2 data","text":"In\u00a0[1]: Copied! <pre>import ctapipe\nprint(f\"ctapipe version {ctapipe.__version__}\")\n</pre> import ctapipe print(f\"ctapipe version {ctapipe.__version__}\") <pre>ctapipe version 0.17.0\n</pre> In\u00a0[2]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nfrom ctapipe.instrument import SubarrayDescription\nfrom ctapipe.io import TableLoader\n</pre> import numpy as np import matplotlib.pyplot as plt from tqdm import tqdm  from ctapipe.instrument import SubarrayDescription from ctapipe.io import TableLoader <pre>/home/runner/micromamba/envs/ctaodl2/lib/python3.9/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n</pre> In\u00a0[3]: Copied! <pre>from tqdm.auto import tqdm\n</pre> from tqdm.auto import tqdm In\u00a0[4]: Copied! <pre>def read_table(filename, tel_ids=None, stop=None):\n    \"\"\"\n    Read data from a file and return it as a pandas DataFrame.\n\n    Parameters\n    ----------\n    filename : str\n        The path to the input file.\n    tel_ids : list or None, optional\n        A list of telescope IDs to include in the data. If None, all telescopes are included. Default is None.\n    stop : int or None, optional\n        The number of events to read from the file. If None, all events are read. Default is None.\n    Returns\n    -------\n    pandas.DataFrame\n        The data read from the file as a pandas DataFrame.\n    \"\"\"\n    loader = TableLoader(\n        input_url=filename,\n        load_dl1_parameters=True,\n        load_dl2=True,\n        load_instrument=True,\n        load_simulated=True,\n        load_true_parameters=True,\n    )\n\n    data = loader.read_telescope_events(telescopes=tel_ids, stop=stop)\n    data.remove_columns([col for col in data.colnames if len(data[col].shape) &gt; 1])\n    return data.to_pandas()\n</pre> def read_table(filename, tel_ids=None, stop=None):     \"\"\"     Read data from a file and return it as a pandas DataFrame.      Parameters     ----------     filename : str         The path to the input file.     tel_ids : list or None, optional         A list of telescope IDs to include in the data. If None, all telescopes are included. Default is None.     stop : int or None, optional         The number of events to read from the file. If None, all events are read. Default is None.     Returns     -------     pandas.DataFrame         The data read from the file as a pandas DataFrame.     \"\"\"     loader = TableLoader(         input_url=filename,         load_dl1_parameters=True,         load_dl2=True,         load_instrument=True,         load_simulated=True,         load_true_parameters=True,     )      data = loader.read_telescope_events(telescopes=tel_ids, stop=stop)     data.remove_columns([col for col in data.colnames if len(data[col].shape) &gt; 1])     return data.to_pandas()  In\u00a0[5]: Copied! <pre>dl2_proton_filename = \"../data/proton.dl2.h5\"\ndl2_gamma_filename = \"../data/gamma-diffuse.dl2.h5\"\n</pre> dl2_proton_filename = \"../data/proton.dl2.h5\" dl2_gamma_filename = \"../data/gamma-diffuse.dl2.h5\" In\u00a0[6]: Copied! <pre>subarray = SubarrayDescription.from_hdf(dl2_proton_filename)\n</pre> subarray = SubarrayDescription.from_hdf(dl2_proton_filename) In\u00a0[7]: Copied! <pre># limited due to github action limited memory. Change to None to get full statistics\nn_events = 100000\n\nprotons = read_table(dl2_proton_filename, stop=n_events)\ngammas = read_table(dl2_gamma_filename, stop=n_events)\n</pre> # limited due to github action limited memory. Change to None to get full statistics n_events = 100000  protons = read_table(dl2_proton_filename, stop=n_events) gammas = read_table(dl2_gamma_filename, stop=n_events) In\u00a0[8]: Copied! <pre>protons.describe()\n</pre> protons.describe() Out[8]: obs_id event_id tel_id hillas_intensity hillas_skewness hillas_kurtosis hillas_fov_lon hillas_fov_lat hillas_r hillas_phi ... HillasReconstructor_core_uncert_x HillasReconstructor_core_uncert_y HillasReconstructor_core_tilted_x HillasReconstructor_core_tilted_y HillasReconstructor_core_tilted_uncert_x HillasReconstructor_core_tilted_uncert_y HillasReconstructor_h_max HillasReconstructor_h_max_uncert HillasReconstructor_average_intensity HillasReconstructor_goodness_of_fit count 243434.000000 2.434340e+05 243434.000000 1.847670e+05 184767.000000 184767.000000 184767.000000 184767.000000 184767.000000 184767.000000 ... 0.0 0.0 143687.000000 143687.000000 0.0 0.0 143687.000000 0.0 143687.000000 0.0 mean 12278.376574 2.486991e+06 9.872676 1.489208e+03 0.002598 2.328642 0.002845 -0.005889 2.367234 0.165919 ... NaN NaN -20.773572 -48.146966 NaN NaN 8316.845538 NaN 2242.854539 NaN min 10000.000000 1.010000e+02 1.000000 5.000001e+01 -5.193683 1.000137 -3.736820 -4.054100 0.012106 -179.997231 ... NaN NaN -52113.435619 -433154.245119 NaN NaN 27.450918 NaN 51.679496 NaN 25% 10840.000000 1.216719e+06 4.000000 9.348740e+01 -0.285687 1.872580 -1.356408 -1.380716 1.615606 -89.865696 ... NaN NaN -126.372388 -142.112669 NaN NaN 6009.533139 NaN 192.893026 NaN 50% 11933.000000 2.481509e+06 8.000000 1.843154e+02 0.001152 2.182177 -0.003268 0.007653 2.349409 0.496306 ... NaN NaN -29.610555 -22.564810 NaN NaN 7887.871830 NaN 395.098508 NaN 75% 13786.000000 3.748700e+06 11.000000 5.215911e+02 0.290451 2.582801 1.362969 1.365592 3.258999 90.378599 ... NaN NaN 57.316993 76.837541 NaN NaN 9716.422276 NaN 1075.090369 NaN max 15438.000000 5.000003e+06 35.000000 1.351788e+06 5.969430 45.300332 3.742301 4.060685 4.084685 179.993740 ... NaN NaN 209323.393149 343728.681274 NaN NaN 997012.478075 NaN 473773.681108 NaN std 1627.939306 1.450195e+06 8.907840 1.316058e+04 0.509023 0.892877 1.814565 1.806119 0.975156 104.024104 ... NaN NaN 1900.207892 3241.114749 NaN NaN 7375.972406 NaN 11337.581138 NaN <p>8 rows \u00d7 111 columns</p> In\u00a0[9]: Copied! <pre>gammas.describe()\n</pre> gammas.describe() Out[9]: obs_id event_id tel_id hillas_intensity hillas_skewness hillas_kurtosis hillas_fov_lon hillas_fov_lat hillas_r hillas_phi ... HillasReconstructor_core_uncert_x HillasReconstructor_core_uncert_y HillasReconstructor_core_tilted_x HillasReconstructor_core_tilted_y HillasReconstructor_core_tilted_uncert_x HillasReconstructor_core_tilted_uncert_y HillasReconstructor_h_max HillasReconstructor_h_max_uncert HillasReconstructor_average_intensity HillasReconstructor_goodness_of_fit count 273624.000000 2.736240e+05 273624.000000 205891.000000 205891.000000 205891.000000 205891.000000 205891.000000 205891.000000 205891.000000 ... 0.0 0.0 176562.000000 176562.000000 0.0 0.0 176562.000000 0.0 176562.000000 0.0 mean 5117.391022 2.496656e+06 9.628907 1217.948032 -0.000048 2.349440 -0.002180 0.012361 2.342098 1.076141 ... NaN NaN -46.661051 -39.613491 NaN NaN 9313.011778 NaN 1592.500842 NaN min 5000.000000 1.010000e+02 1.000000 50.002919 -4.072445 1.006937 -3.740056 -4.050354 0.003672 -179.998125 ... NaN NaN -562891.280995 -429672.684865 NaN NaN 72.175967 NaN 50.940603 NaN 25% 5059.000000 1.240512e+06 4.000000 96.518319 -0.260956 1.944135 -1.340862 -1.336462 1.580655 -88.648830 ... NaN NaN -152.736155 -179.779751 NaN NaN 7797.330686 NaN 170.377078 NaN 50% 5110.000000 2.496609e+06 7.000000 194.748107 -0.000188 2.202669 0.002231 0.021422 2.275186 1.491453 ... NaN NaN -31.302657 -27.147178 NaN NaN 9130.217230 NaN 335.991344 NaN 75% 5174.000000 3.751409e+06 10.000000 513.354879 0.260221 2.553191 1.336309 1.360847 3.248243 91.091363 ... NaN NaN 84.922760 114.373096 NaN NaN 10642.159723 NaN 814.186966 NaN max 5271.000000 5.000015e+06 35.000000 910988.937369 5.396525 40.447260 3.744971 4.058099 4.080309 179.999212 ... NaN NaN 242640.421375 193267.563456 NaN NaN 375505.215232 NaN 306094.062427 NaN std 73.921067 1.444107e+06 8.805074 9374.779680 0.455707 0.777383 1.801779 1.791422 0.985043 103.901273 ... NaN NaN 2986.469463 2232.601377 NaN NaN 3218.053462 NaN 7927.164195 NaN <p>8 rows \u00d7 111 columns</p> In\u00a0[10]: Copied! <pre>columns = protons.columns\ncolumns\n</pre> columns = protons.columns columns Out[10]: <pre>Index(['obs_id', 'event_id', 'tel_id', 'hillas_intensity', 'hillas_skewness',\n       'hillas_kurtosis', 'hillas_fov_lon', 'hillas_fov_lat', 'hillas_r',\n       'hillas_phi',\n       ...\n       'HillasReconstructor_core_uncert_y',\n       'HillasReconstructor_core_tilted_x',\n       'HillasReconstructor_core_tilted_y',\n       'HillasReconstructor_core_tilted_uncert_x',\n       'HillasReconstructor_core_tilted_uncert_y', 'HillasReconstructor_h_max',\n       'HillasReconstructor_h_max_uncert', 'HillasReconstructor_is_valid',\n       'HillasReconstructor_average_intensity',\n       'HillasReconstructor_goodness_of_fit'],\n      dtype='object', length=120)</pre> In\u00a0[11]: Copied! <pre>numerical_columns = [col for col in columns if hasattr(protons[col], 'dtype') and np.issubdtype(protons[col].dtype, np.number)]\n\nncol = 2\nnrow = len(numerical_columns) // ncol + 1\nfig, axes = plt.subplots(ncols=ncol, nrows=nrow, figsize=(20, 5*nrow))\n\nnbins = 100\nopt = dict(bins=nbins, histtype='step', density=True, lw=2)\ncolumns_in_logscale = [col for col in numerical_columns if 'intensity' in col]\nprint(columns_in_logscale)\n\n\nfor i, col in tqdm(enumerate(numerical_columns), total=len(numerical_columns)):\n    ax = axes[i//ncol, i%ncol]\n    mask = np.isfinite(protons[col])\n    # if col in columns_in_logscale and protons[mask][col].min() &gt; 0 and gammas[col].min() &gt; 0:\n    #     opt['bins'] = np.logspace(np.log10(protons[mask][col].min()), np.log10(protons[mask][col].max()), nbins)\n    ax.hist(protons[mask][col], label='protons', **opt)\n\n    mask = np.isfinite(gammas[col])\n    ax.hist(gammas[mask][col], label='gammas', **opt)\n    \n    opt['bins'] = nbins\n    ax.set_title(col)\n    ax.legend()\n</pre> numerical_columns = [col for col in columns if hasattr(protons[col], 'dtype') and np.issubdtype(protons[col].dtype, np.number)]  ncol = 2 nrow = len(numerical_columns) // ncol + 1 fig, axes = plt.subplots(ncols=ncol, nrows=nrow, figsize=(20, 5*nrow))  nbins = 100 opt = dict(bins=nbins, histtype='step', density=True, lw=2) columns_in_logscale = [col for col in numerical_columns if 'intensity' in col] print(columns_in_logscale)   for i, col in tqdm(enumerate(numerical_columns), total=len(numerical_columns)):     ax = axes[i//ncol, i%ncol]     mask = np.isfinite(protons[col])     # if col in columns_in_logscale and protons[mask][col].min() &gt; 0 and gammas[col].min() &gt; 0:     #     opt['bins'] = np.logspace(np.log10(protons[mask][col].min()), np.log10(protons[mask][col].max()), nbins)     ax.hist(protons[mask][col], label='protons', **opt)      mask = np.isfinite(gammas[col])     ax.hist(gammas[mask][col], label='gammas', **opt)          opt['bins'] = nbins     ax.set_title(col)     ax.legend() <pre>['hillas_intensity', 'leakage_intensity_width_1', 'leakage_intensity_width_2', 'intensity_max', 'intensity_min', 'intensity_mean', 'intensity_std', 'intensity_skewness', 'intensity_kurtosis', 'true_hillas_intensity', 'true_leakage_intensity_width_1', 'true_leakage_intensity_width_2', 'true_intensity_max', 'true_intensity_min', 'true_intensity_mean', 'true_intensity_std', 'true_intensity_skewness', 'true_intensity_kurtosis', 'HillasReconstructor_average_intensity']\n</pre> <pre>\r  0%|          | 0/110 [00:00&lt;?, ?it/s]</pre> <pre>\r  2%|\u258f         | 2/110 [00:00&lt;00:08, 13.01it/s]</pre> <pre>\r  4%|\u258e         | 4/110 [00:00&lt;00:08, 12.04it/s]</pre> <pre>\r  5%|\u258c         | 6/110 [00:00&lt;00:09, 11.33it/s]</pre> <pre>\r  7%|\u258b         | 8/110 [00:00&lt;00:09, 11.00it/s]</pre> <pre>\r  9%|\u2589         | 10/110 [00:00&lt;00:09, 10.84it/s]</pre> <pre>\r 11%|\u2588         | 12/110 [00:01&lt;00:09, 10.74it/s]</pre> <pre>\r 13%|\u2588\u258e        | 14/110 [00:01&lt;00:08, 10.68it/s]</pre> <pre>\r 15%|\u2588\u258d        | 16/110 [00:01&lt;00:08, 10.50it/s]</pre> <pre>\r 16%|\u2588\u258b        | 18/110 [00:01&lt;00:08, 10.54it/s]</pre> <pre>\r 18%|\u2588\u258a        | 20/110 [00:01&lt;00:08, 10.51it/s]</pre> <pre>\r 20%|\u2588\u2588        | 22/110 [00:02&lt;00:08, 10.50it/s]</pre> <pre>\r 22%|\u2588\u2588\u258f       | 24/110 [00:02&lt;00:08, 10.52it/s]</pre> <pre>\r 24%|\u2588\u2588\u258e       | 26/110 [00:02&lt;00:07, 10.77it/s]</pre> <pre>\r 25%|\u2588\u2588\u258c       | 28/110 [00:02&lt;00:07, 11.28it/s]</pre> <pre>\r 27%|\u2588\u2588\u258b       | 30/110 [00:02&lt;00:06, 11.77it/s]</pre> <pre>\r 29%|\u2588\u2588\u2589       | 32/110 [00:02&lt;00:06, 11.37it/s]</pre> <pre>\r 31%|\u2588\u2588\u2588       | 34/110 [00:03&lt;00:06, 11.16it/s]</pre> <pre>\r 33%|\u2588\u2588\u2588\u258e      | 36/110 [00:03&lt;00:06, 10.99it/s]</pre> <pre>\r 35%|\u2588\u2588\u2588\u258d      | 38/110 [00:03&lt;00:06, 10.69it/s]</pre> <pre>\r 36%|\u2588\u2588\u2588\u258b      | 40/110 [00:03&lt;00:06, 10.66it/s]</pre> <pre>\r 38%|\u2588\u2588\u2588\u258a      | 42/110 [00:03&lt;00:06, 10.66it/s]</pre> <pre>\r 40%|\u2588\u2588\u2588\u2588      | 44/110 [00:04&lt;00:06, 10.90it/s]</pre> <pre>/home/runner/micromamba/envs/ctaodl2/lib/python3.9/site-packages/numpy/lib/histograms.py:885: RuntimeWarning: invalid value encountered in divide\n  return n/db/n.sum(), bin_edges\n</pre> <pre>\r 42%|\u2588\u2588\u2588\u2588\u258f     | 46/110 [00:04&lt;00:05, 12.27it/s]</pre> <pre>\r 44%|\u2588\u2588\u2588\u2588\u258e     | 48/110 [00:04&lt;00:05, 11.16it/s]</pre> <pre>\r 45%|\u2588\u2588\u2588\u2588\u258c     | 50/110 [00:04&lt;00:05, 10.50it/s]</pre> <pre>\r 47%|\u2588\u2588\u2588\u2588\u258b     | 52/110 [00:04&lt;00:05, 10.09it/s]</pre> <pre>\r 49%|\u2588\u2588\u2588\u2588\u2589     | 54/110 [00:05&lt;00:05,  9.82it/s]</pre> <pre>\r 51%|\u2588\u2588\u2588\u2588\u2588     | 56/110 [00:05&lt;00:05,  9.63it/s]</pre> <pre>\r 52%|\u2588\u2588\u2588\u2588\u2588\u258f    | 57/110 [00:05&lt;00:05,  9.57it/s]</pre> <pre>\r 53%|\u2588\u2588\u2588\u2588\u2588\u258e    | 58/110 [00:05&lt;00:05,  9.48it/s]</pre> <pre>\r 54%|\u2588\u2588\u2588\u2588\u2588\u258e    | 59/110 [00:05&lt;00:05,  9.43it/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258d    | 60/110 [00:05&lt;00:05,  9.35it/s]</pre> <pre>\r 55%|\u2588\u2588\u2588\u2588\u2588\u258c    | 61/110 [00:05&lt;00:05,  9.32it/s]</pre> <pre>\r 56%|\u2588\u2588\u2588\u2588\u2588\u258b    | 62/110 [00:05&lt;00:05,  9.28it/s]</pre> <pre>\r 57%|\u2588\u2588\u2588\u2588\u2588\u258b    | 63/110 [00:05&lt;00:05,  9.23it/s]</pre> <pre>\r 58%|\u2588\u2588\u2588\u2588\u2588\u258a    | 64/110 [00:06&lt;00:04,  9.21it/s]</pre> <pre>\r 60%|\u2588\u2588\u2588\u2588\u2588\u2588    | 66/110 [00:06&lt;00:04, 10.65it/s]</pre> <pre>\r 62%|\u2588\u2588\u2588\u2588\u2588\u2588\u258f   | 68/110 [00:06&lt;00:03, 11.45it/s]</pre> <pre>\r 64%|\u2588\u2588\u2588\u2588\u2588\u2588\u258e   | 70/110 [00:06&lt;00:03, 11.80it/s]</pre> <pre>\r 65%|\u2588\u2588\u2588\u2588\u2588\u2588\u258c   | 72/110 [00:06&lt;00:03, 11.44it/s]</pre> <pre>\r 67%|\u2588\u2588\u2588\u2588\u2588\u2588\u258b   | 74/110 [00:06&lt;00:03, 10.61it/s]</pre> <pre>\r 69%|\u2588\u2588\u2588\u2588\u2588\u2588\u2589   | 76/110 [00:07&lt;00:03, 10.63it/s]</pre> <pre>\r 71%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588   | 78/110 [00:07&lt;00:02, 11.27it/s]</pre> <pre>\r 73%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e  | 80/110 [00:07&lt;00:02, 11.73it/s]</pre> <pre>\r 75%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d  | 82/110 [00:07&lt;00:02, 11.90it/s]</pre> <pre>\r 76%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b  | 84/110 [00:07&lt;00:02, 12.23it/s]</pre> <pre>\r 78%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258a  | 86/110 [00:07&lt;00:01, 12.53it/s]</pre> <pre>\r 80%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  | 88/110 [00:08&lt;00:01, 12.76it/s]</pre> <pre>\r 82%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258f | 90/110 [00:08&lt;00:01, 12.87it/s]</pre> <pre>\r 84%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258e | 92/110 [00:08&lt;00:01, 12.91it/s]</pre> <pre>\r 85%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c | 94/110 [00:08&lt;00:01, 12.93it/s]</pre> <pre>\r 87%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b | 96/110 [00:08&lt;00:01, 12.25it/s]</pre> <pre>\r 89%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2589 | 98/110 [00:08&lt;00:01, 11.76it/s]</pre> <pre>\r 91%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 | 100/110 [00:09&lt;00:00, 11.48it/s]</pre> <pre>\r 95%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258d| 104/110 [00:09&lt;00:00, 14.45it/s]</pre> <pre>\r 97%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258b| 107/110 [00:09&lt;00:00, 17.44it/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 110/110 [00:09&lt;00:00, 20.09it/s]</pre> <pre>\r100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 110/110 [00:09&lt;00:00, 11.59it/s]</pre> <pre>\n</pre> In\u00a0[12]: Copied! <pre>opt_intensity = dict(bins=np.logspace(1.65, 4, 50), histtype='step', density=False, lw=2)\nplt.figure(figsize=(10, 5))\nplt.hist(gammas['hillas_intensity'], **opt_intensity, label='gammas');\nplt.hist(protons['hillas_intensity'], **opt_intensity, label='protons');\nplt.hist(gammas['HillasReconstructor_average_intensity'], **opt_intensity, label='gammas (average)')\nplt.hist(protons['HillasReconstructor_average_intensity'], **opt_intensity, label='protons (average)')\n\nplt.yscale('log')\nplt.xscale('log')\nxticks = [50, 100, 200, 500, 1000, 10000]\nplt.gca().set_xticks(xticks)\nplt.gca().set_xticklabels([str(x) for x in xticks])\nplt.xlabel('Intensity')\nplt.ylabel('Number of events')\nplt.grid(which='both')\nplt.legend()\n</pre> opt_intensity = dict(bins=np.logspace(1.65, 4, 50), histtype='step', density=False, lw=2) plt.figure(figsize=(10, 5)) plt.hist(gammas['hillas_intensity'], **opt_intensity, label='gammas'); plt.hist(protons['hillas_intensity'], **opt_intensity, label='protons'); plt.hist(gammas['HillasReconstructor_average_intensity'], **opt_intensity, label='gammas (average)') plt.hist(protons['HillasReconstructor_average_intensity'], **opt_intensity, label='protons (average)')  plt.yscale('log') plt.xscale('log') xticks = [50, 100, 200, 500, 1000, 10000] plt.gca().set_xticks(xticks) plt.gca().set_xticklabels([str(x) for x in xticks]) plt.xlabel('Intensity') plt.ylabel('Number of events') plt.grid(which='both') plt.legend()  Out[12]: <pre>&lt;matplotlib.legend.Legend at 0x7f968e95d430&gt;</pre> In\u00a0[13]: Copied! <pre>opt_energy = dict(bins=np.logspace(-3, 3, 50), histtype='step', density=False, lw=2)\nplt.figure(figsize=(10, 5))\nplt.hist(gammas['true_energy'], **opt_energy, label='gammas');\nplt.hist(protons['true_energy'], **opt_energy, label='protons');\n\n\nplt.yscale('log')\nplt.xscale('log')\nplt.xlabel(f\"True Energy [TeV]\")\nplt.ylabel('Number of events')\nplt.grid(which='both')\nplt.legend()\n</pre> opt_energy = dict(bins=np.logspace(-3, 3, 50), histtype='step', density=False, lw=2) plt.figure(figsize=(10, 5)) plt.hist(gammas['true_energy'], **opt_energy, label='gammas'); plt.hist(protons['true_energy'], **opt_energy, label='protons');   plt.yscale('log') plt.xscale('log') plt.xlabel(f\"True Energy [TeV]\") plt.ylabel('Number of events') plt.grid(which='both') plt.legend()  Out[13]: <pre>&lt;matplotlib.legend.Legend at 0x7f968ea98550&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"dl2_params/#explore-ctapipe-dl2-data","title":"Explore ctapipe DL2 data\u00b6","text":""},{"location":"dl2_performances/","title":"DL2 performances","text":"<p>This is an example of how to compute reconstruction performances on this DL2 dataset. We explicitly note that the products provided are preliminary and do not reflect the final performance of the CTA Observatory.</p> <p>Note that this dataset does not include energy reconstruction nor gamma/hadron separation. Therefore, only the angular resolution and effective area can be computed.</p> In\u00a0[1]: Copied! <pre>import ctapipe\nprint(ctapipe.__version__)\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n</pre> import ctapipe print(ctapipe.__version__)  import matplotlib.pyplot as plt import numpy as np <pre>0.17.0\n</pre> In\u00a0[2]: Copied! <pre>filename = '../data/gamma-diffuse.dl2.h5'\n</pre> filename = '../data/gamma-diffuse.dl2.h5' In\u00a0[3]: Copied! <pre>from ctapipe.io import TableLoader\n\ndef read_table(filename, tel_ids=None, stop=None):\n    \"\"\"\n    Read data from a file and return it as a pandas DataFrame.\n\n    Parameters\n    ----------\n    filename : str\n        The path to the input file.\n    tel_ids : list or None, optional\n        A list of telescope IDs to include in the data. If None, all telescopes are included. Default is None.\n    stop : int or None, optional\n        The number of events to read from the file. If None, all events are read. Default is None.\n    Returns\n    -------\n    pandas.DataFrame\n        The data read from the file as a pandas DataFrame.\n    \"\"\"\n    loader = TableLoader(\n        input_url=filename,\n        load_dl1_parameters=True,\n        load_dl2=True,\n        load_instrument=True,\n        load_simulated=True,\n        load_true_parameters=True,\n    )\n\n    data = loader.read_telescope_events(telescopes=tel_ids, stop=stop)\n    data.remove_columns([col for col in data.colnames if len(data[col].shape) &gt; 1])\n    return data\n</pre> from ctapipe.io import TableLoader  def read_table(filename, tel_ids=None, stop=None):     \"\"\"     Read data from a file and return it as a pandas DataFrame.      Parameters     ----------     filename : str         The path to the input file.     tel_ids : list or None, optional         A list of telescope IDs to include in the data. If None, all telescopes are included. Default is None.     stop : int or None, optional         The number of events to read from the file. If None, all events are read. Default is None.     Returns     -------     pandas.DataFrame         The data read from the file as a pandas DataFrame.     \"\"\"     loader = TableLoader(         input_url=filename,         load_dl1_parameters=True,         load_dl2=True,         load_instrument=True,         load_simulated=True,         load_true_parameters=True,     )      data = loader.read_telescope_events(telescopes=tel_ids, stop=stop)     data.remove_columns([col for col in data.colnames if len(data[col].shape) &gt; 1])     return data  <pre>/home/runner/micromamba/envs/ctaodl2/lib/python3.9/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n</pre> In\u00a0[4]: Copied! <pre># limited stats because of github actions limitations =&gt; THE PERFORMANCES ARE NOT REPRESENTATIVE\ndl2_params = read_table(filename, stop=100000)\n</pre> # limited stats because of github actions limitations =&gt; THE PERFORMANCES ARE NOT REPRESENTATIVE dl2_params = read_table(filename, stop=100000) In\u00a0[5]: Copied! <pre>import astropy.units as u\nfrom astropy.coordinates import angular_separation\nfrom pyirf.benchmarks import angular_resolution\nfrom pyirf.binning import create_bins_per_decade\n\ndl2_params['theta'] = angular_separation(dl2_params['true_alt'], dl2_params['true_az'], dl2_params['HillasReconstructor_alt'], dl2_params['HillasReconstructor_az'])\n\nang_res = angular_resolution(dl2_params, \n    energy_bins=np.array([dl2_params['true_energy'].min(), dl2_params['true_energy'].max()])*dl2_params['true_energy'].unit)['angular_resolution_68'][0]\n\nplt.hist(dl2_params['theta'].to(u.deg)**2, bins=100, range=(0*u.deg**2, 1*u.deg**2))\nplt.axvline(ang_res.to_value(u.deg)**2, color='r', label='angular resolution (68%) = {:.2f} deg'.format(ang_res.to_value(u.deg)))\nplt.xlabel(r'$\\theta^2$ (deg$^2$)')\nplt.ylabel('Number of events')\nplt.legend()\n</pre> import astropy.units as u from astropy.coordinates import angular_separation from pyirf.benchmarks import angular_resolution from pyirf.binning import create_bins_per_decade  dl2_params['theta'] = angular_separation(dl2_params['true_alt'], dl2_params['true_az'], dl2_params['HillasReconstructor_alt'], dl2_params['HillasReconstructor_az'])  ang_res = angular_resolution(dl2_params,      energy_bins=np.array([dl2_params['true_energy'].min(), dl2_params['true_energy'].max()])*dl2_params['true_energy'].unit)['angular_resolution_68'][0]  plt.hist(dl2_params['theta'].to(u.deg)**2, bins=100, range=(0*u.deg**2, 1*u.deg**2)) plt.axvline(ang_res.to_value(u.deg)**2, color='r', label='angular resolution (68%) = {:.2f} deg'.format(ang_res.to_value(u.deg))) plt.xlabel(r'$\\theta^2$ (deg$^2$)') plt.ylabel('Number of events') plt.legend() Out[5]: <pre>&lt;matplotlib.legend.Legend at 0x7f5a6ed63880&gt;</pre> In\u00a0[6]: Copied! <pre>energy_bins = create_bins_per_decade(1e-2*u.TeV, 1e2*u.TeV, 10)\nang_res = angular_resolution(dl2_params, energy_bins=energy_bins)\n\n\nplt.figure(figsize=(10, 6))\nplt.step(ang_res['true_energy_center'], ang_res['angular_resolution_68'], where='mid')\nplt.xscale('log')\nplt.yscale('log')\nplt.xlabel('True Energy (TeV)')\nplt.ylabel('Angular Resolution (deg)')\nplt.title('Angular Resolution vs True Energy')\nplt.grid(True, which=\"both\", ls=\"--\")\nplt.show()\n</pre> energy_bins = create_bins_per_decade(1e-2*u.TeV, 1e2*u.TeV, 10) ang_res = angular_resolution(dl2_params, energy_bins=energy_bins)   plt.figure(figsize=(10, 6)) plt.step(ang_res['true_energy_center'], ang_res['angular_resolution_68'], where='mid') plt.xscale('log') plt.yscale('log') plt.xlabel('True Energy (TeV)') plt.ylabel('Angular Resolution (deg)') plt.title('Angular Resolution vs True Energy') plt.grid(True, which=\"both\", ls=\"--\") plt.show() In\u00a0[7]: Copied! <pre>from pyirf.simulations import SimulatedEventsInfo\n\nloader = TableLoader(filename)\nsimulation_table = loader.read_simulation_configuration()\nsimulation_table[:10]\n\n\nsimulation_info = SimulatedEventsInfo(\n    energy_min=simulation_table['energy_range_min'][0] * simulation_table['energy_range_min'].unit,\n    energy_max=simulation_table['energy_range_max'][0] * simulation_table['energy_range_max'].unit,\n    spectral_index=simulation_table['spectral_index'][0],\n    max_impact=simulation_table['max_scatter_range'][0] * simulation_table['max_scatter_range'].unit,\n    n_showers=np.sum(simulation_table['n_showers'])*simulation_table['shower_reuse'][0],\n    viewcone_min=simulation_table['min_viewcone_radius'][0] * simulation_table['min_viewcone_radius'].unit,\n    viewcone_max=simulation_table['max_viewcone_radius'][0] * simulation_table['max_viewcone_radius'].unit,\n)\n\nsimulation_info\n</pre> from pyirf.simulations import SimulatedEventsInfo  loader = TableLoader(filename) simulation_table = loader.read_simulation_configuration() simulation_table[:10]   simulation_info = SimulatedEventsInfo(     energy_min=simulation_table['energy_range_min'][0] * simulation_table['energy_range_min'].unit,     energy_max=simulation_table['energy_range_max'][0] * simulation_table['energy_range_max'].unit,     spectral_index=simulation_table['spectral_index'][0],     max_impact=simulation_table['max_scatter_range'][0] * simulation_table['max_scatter_range'].unit,     n_showers=np.sum(simulation_table['n_showers'])*simulation_table['shower_reuse'][0],     viewcone_min=simulation_table['min_viewcone_radius'][0] * simulation_table['min_viewcone_radius'].unit,     viewcone_max=simulation_table['max_viewcone_radius'][0] * simulation_table['max_viewcone_radius'].unit, )  simulation_info  Out[7]: <pre>SimulatedEventsInfo(n_showers=2150000000, energy_min=0.003 TeV, energy_max=330.00 TeV, spectral_index=-2.0, max_impact=1900.00 m, viewcone_min=0.0 degviewcone_max=10.0 deg)</pre> In\u00a0[8]: Copied! <pre>from pyirf.irf import effective_area_per_energy\n\n\n# Compute the effective area\neffective_area = effective_area_per_energy(\n    dl2_params,\n    simulation_info,\n    energy_bins\n)\n\n# Plot the effective area\nplt.figure(figsize=(10, 6))\nplt.step(energy_bins[:-1], effective_area, where='mid')\nplt.xscale('log')\nplt.yscale('log')\nplt.xlabel('Energy (TeV)')\nplt.ylabel('Effective Area (m\u00b2)')\nplt.title('Effective Area vs Energy')\nplt.grid(True, which=\"both\", ls=\"--\")\nplt.show()\n</pre> from pyirf.irf import effective_area_per_energy   # Compute the effective area effective_area = effective_area_per_energy(     dl2_params,     simulation_info,     energy_bins )  # Plot the effective area plt.figure(figsize=(10, 6)) plt.step(energy_bins[:-1], effective_area, where='mid') plt.xscale('log') plt.yscale('log') plt.xlabel('Energy (TeV)') plt.ylabel('Effective Area (m\u00b2)') plt.title('Effective Area vs Energy') plt.grid(True, which=\"both\", ls=\"--\") plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"dl2_performances/#dl2-performances","title":"DL2 performances\u00b6","text":""},{"location":"simu_info/","title":"Simulation information","text":"In\u00a0[1]: Copied! <pre>import ctapipe\nprint(ctapipe.__version__)\n</pre> import ctapipe print(ctapipe.__version__) <pre>0.17.0\n</pre> In\u00a0[2]: Copied! <pre>from ctapipe.instrument import SubarrayDescription\nfrom ctapipe.io import TableLoader\n</pre> from ctapipe.instrument import SubarrayDescription from ctapipe.io import TableLoader <pre>/home/runner/micromamba/envs/ctaodl2/lib/python3.9/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n  from .autonotebook import tqdm as notebook_tqdm\n</pre> In\u00a0[3]: Copied! <pre>filename = '../data/gamma-diffuse.dl2.h5'\n</pre> filename = '../data/gamma-diffuse.dl2.h5' In\u00a0[4]: Copied! <pre>subarray = SubarrayDescription.from_hdf(filename)\n</pre> subarray = SubarrayDescription.from_hdf(filename) In\u00a0[5]: Copied! <pre>subarray.info()\n</pre> subarray.info() <pre>Subarray : MonteCarloArray_1-11,19,35\nNum Tels : 13\nFootprint: 0.28 km2\n\n       Type       Count  Tel IDs  \n----------------- ----- ----------\n   LST_LST_LSTCam     4 1-4       \nMST_MST_NectarCam     9 5-11,19,35\n</pre> In\u00a0[6]: Copied! <pre>subarray.peek()\n</pre> subarray.peek() In\u00a0[7]: Copied! <pre>subarray.footprint\n</pre> subarray.footprint Out[7]:  $0.28402396 \\; \\mathrm{km^{2}}$  In\u00a0[8]: Copied! <pre>subarray.telescope_types\n</pre> subarray.telescope_types Out[8]: <pre>(TelescopeDescription(type='LST', optics_name='LST', camera_name='LSTCam'),\n TelescopeDescription(type='MST', optics_name='MST', camera_name='NectarCam'))</pre> In\u00a0[9]: Copied! <pre>loader = TableLoader(filename)\nsimulation_table = loader.read_simulation_configuration()\nsimulation_table[:10]\n</pre> loader = TableLoader(filename) simulation_table = loader.read_simulation_configuration() simulation_table[:10] Out[9]: Table length=10 obs_idcorsika_versionsimtel_versionenergy_range_minenergy_range_maxprod_site_B_totalprod_site_B_declinationprod_site_B_inclinationprod_site_altspectral_indexshower_prog_startshower_prog_iddetector_prog_startdetector_prog_idn_showersshower_reusemax_altmin_altmax_azmin_azdiffusemax_viewcone_radiusmin_viewcone_radiusmax_scatter_rangemin_scatter_rangecore_pos_modeinjection_heightatmospherecorsika_iact_optionscorsika_low_E_modelcorsika_high_E_modelcorsika_bunchsizecorsika_wlen_mincorsika_wlen_maxcorsika_low_E_detailcorsika_high_E_detail TeVTeVuTradradmradradradraddegdegmmmnmnm int32int64int64float32float32float64float64float64float64float64int64int64int64int64int64int64float32float32float32float32int64float32float32float32float32int64float64int64int64int64int64float64float64float64int64int64 5000771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606273982150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5004771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606275264150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5006771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606274983150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5007771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606274160150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5009771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606303290150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5031771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606275589150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5033771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606275120150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5037771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606275387150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5040771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606275689150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 5041771015933496430.003330.038.77302551269531-0.07534062862396240.64818996191024782158.0-2.0160630560011606275252150000201.22173051.2217305-6.770173e-08-6.770173e-08110.00.01900.00.01-1.099187235.0240.0900.00303 In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"simu_info/#simulation-information","title":"Simulation information\u00b6","text":""}]}